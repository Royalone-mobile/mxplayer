/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// 
/// @par 模块名
/// 基础线程对象
/// @par 相关文件
/// ThreadBase.cpp
/// @par 功能详细描述
/// @par 多线程安全性
/// [否，说明]
/// @par 异常时安全性
/// [否，说明]
/// @note         -
/// @file         ThreadBase.h
/// @brief        -
/// @author       Li.xl
/// @version      1.0
/// @date         2013/11/18
/// @todo         -
/// 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __TPOOL_THREADBASE_H_H__
#define __TPOOL_THREADBASE_H_H__

#include "TTask.h"

////////////////////////////////////////////////////////////////////////////////
/// 
/// @par 	异常类
/// 否
/// @par 	备注
/// 线程基础对象实例
/// @par 	典型用法
/// @code
/// -
/// @endcode
/// 
/// @brief	
/// @author	Li.xl
////////////////////////////////////////////////////////////////////////////////

class CThreadPool;
class CThreadBase
{
public:
	/// ==============================================
	/// @par 功能 
	/// 线程构造函数
	/// @param 
	/// [in,out]	<参数名>		<参数说明>
	///	[in]		pThreadPool		线程池对象
	/// @return 	-
	/// @note 		Creat By li.xl 2013/11/19 
	/// ==============================================
	CThreadBase(CThreadPool* pThreadPool);
	
	/// ==============================================
	/// @par 功能 
	/// 析构函数
	/// @param 
	/// [in,out]	<参数名>		<参数说明>
	///	-
	/// @return 	-
	/// @note 		Creat By li.xl 2013/11/19 
	/// ==============================================
	virtual ~CThreadBase();

	/// ==============================================
	/// @par 功能 
	/// 启动线程
	/// @param 
	/// [in,out]	<参数名>		<参数说明>
	///	-
	/// @return 	-
	/// @note 		Creat By li.xl 2013/11/18 
	/// ==============================================
	bool e_Creat();

	/// ==============================================
	/// @par 功能 
	/// 运行线程
	/// @param 
	/// [in,out]	<参数名>		<参数说明>
	/// [in]		pTTask			运行线程任务
	/// @return 	-
	/// @note 		Creat By li.xl 2013/11/18 
	/// ==============================================
	bool e_Run(CTTask* pTTask);

	/// ==============================================
	/// @par 功能 
	/// 销毁线程
	/// @param 
	/// [in,out]	<参数名>		<参数说明>
	///	-
	/// @return 	-
	/// @note 		Creat By li.xl 2013/11/18 
	/// ==============================================
	bool e_Destroy();

	/// ==============================================
	/// @par 功能 
	/// 获取线程运行状态
	/// @param 
	/// [in,out]	<参数名>		<参数说明>
	///	-
	/// @return 	-
	/// @note 		Creat By li.xl 2013/11/18 
	/// ==============================================
	bool e_GetRunStatus();

	/// ==============================================
	/// @par 功能 
	/// 线程处理
	/// @param 
	/// [in,out]	<参数名>		<参数说明>
	///	-
	/// @return 	-
	/// @note 		Creat By li.xl 2013/11/18 
	/// ==============================================
	void e_ThreadProcess();

private:

	/// ==============================================
	/// @par 功能 
	/// 删除任务对象
	/// @param 
	/// [in,out]	<参数名>		<参数说明>
	/// -
	/// @return 	删除任务对象是否成功
	/// @note 		Creat By li.xl 2013/11/19 
	/// ==============================================
	bool i_DelTask();

	/// ==============================================
	/// @par 功能 
	/// 启动线程线程
	/// @param 
	/// [in,out]	<参数名>		<参数说明>
	///	-
	/// @return 	-
	/// @note 		Creat By li.xl 2013/11/18 
	/// ==============================================
	static UINT WINAPI i_StartThread(LPVOID lpParama);

private:
	// 线程运行状态
	bool	m_bIsRuning;
	// 线程句柄
	HANDLE	m_hTheadHandle;
	// 线程运行信号事件
	HANDLE	m_hThreadEven;
	// 线程处理任务
	CTTask*	m_pTTask;
	// 线程管理对象指针
	CThreadPool* m_pThreadPool;
};

#endif	/// __TPOOL_THREADBASE_H_H__